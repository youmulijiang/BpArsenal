# 构建与部署规范

## Maven 构建配置

### POM.xml 基础配置 
基于: [pom.xml](mdc:pom.xml)

```xml
<properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

</properties>

<dependencies>
    <!-- Burp Suite Montoya API -->
    <dependency>
        <groupId>net.portswigger.burp.extender</groupId>
        <artifactId>montoya-api</artifactId>
        <version>2023.12.1</version>
        <scope>provided</scope>
    </dependency>
    

</dependencies>
```

### 构建插件配置
```xml
<build>
    <plugins>
        <!-- 编译插件 -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.11.0</version>
            <configuration>
                <source>17</source>
                <target>17</target>
                <compilerArgs>
                    <arg>-Xlint:all</arg>
                    <arg>-Werror</arg>
                </compilerArgs>
            </configuration>
        </plugin>
        

        
        <!-- 打包插件 -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>3.4.1</version>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals>
                        <goal>shade</goal>
                    </goals>
                    <configuration>
                        <createDependencyReducedPom>false</createDependencyReducedPom>
                        <filters>
                            <filter>
                                <artifact>*:*</artifact>
                                <excludes>
                                    <exclude>META-INF/*.SF</exclude>
                                    <exclude>META-INF/*.DSA</exclude>
                                    <exclude>META-INF/*.RSA</exclude>
                                </excludes>
                            </filter>
                        </filters>
                    </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
```

## 代码质量检查

### Checkstyle 配置
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-checkstyle-plugin</artifactId>
    <version>3.2.1</version>
    <configuration>
        <configLocation>checkstyle.xml</configLocation>
        <encoding>UTF-8</encoding>
        <consoleOutput>true</consoleOutput>
        <failsOnError>true</failsOnError>
    </configuration>
    <executions>
        <execution>
            <id>validate</id>
            <phase>validate</phase>
            <goals>
                <goal>check</goal>
            </goals>
        </execution>
    </executions>
</plugin>
```

### SpotBugs 静态分析
```xml
<plugin>
    <groupId>com.github.spotbugs</groupId>
    <artifactId>spotbugs-maven-plugin</artifactId>
    <version>4.7.3.0</version>
    <configuration>
        <effort>Max</effort>
        <threshold>Low</threshold>
        <xmlOutput>true</xmlOutput>
    </configuration>
    <executions>
        <execution>
            <goals>
                <goal>check</goal>
            </goals>
        </execution>
    </executions>
</plugin>
```

## 构建脚本

### Windows PowerShell 构建脚本
```powershell
# build.ps1
param(
    [string]$Version = "1.0.0-SNAPSHOT",
    [switch]$Clean = $false
)

Write-Host "开始构建 Burp Suite 插件..." -ForegroundColor Green

# 清理之前的构建
if ($Clean) {
    Write-Host "清理项目..." -ForegroundColor Yellow
    mvn clean
}

# 设置版本
Write-Host "设置版本: $Version" -ForegroundColor Yellow
mvn versions:set -DnewVersion=$Version -DgenerateBackupPoms=false

# 编译项目
Write-Host "编译项目..." -ForegroundColor Yellow
mvn compile

if ($LASTEXITCODE -ne 0) {
    Write-Host "构建失败!" -ForegroundColor Red
    exit 1
}

# 打包
Write-Host "打包插件..." -ForegroundColor Yellow
mvn package

if ($LASTEXITCODE -eq 0) {
    Write-Host "构建成功! JAR文件位于 target/ 目录" -ForegroundColor Green
    
    # 显示输出文件信息
    $jarFile = Get-ChildItem -Path "target" -Filter "*.jar" | Where-Object { -not $_.Name.Contains("original") }
    if ($jarFile) {
        Write-Host "输出文件: $($jarFile.FullName)" -ForegroundColor Cyan
        Write-Host "文件大小: $([math]::Round($jarFile.Length / 1MB, 2)) MB" -ForegroundColor Cyan
    }
} else {
    Write-Host "打包失败!" -ForegroundColor Red
    exit 1
}
```

### Linux/macOS 构建脚本
```bash
#!/bin/bash
# build.sh

set -e

VERSION=${1:-"1.0.0-SNAPSHOT"}
CLEAN=${2:-false}

echo "开始构建 Burp Suite 插件..."

# 清理之前的构建
if [ "$CLEAN" = "true" ]; then
    echo "清理项目..."
    mvn clean
fi

# 设置版本
echo "设置版本: $VERSION"
mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

# 编译项目
echo "编译项目..."
mvn compile

# 打包
echo "打包插件..."
mvn package

echo "构建完成! JAR文件位于 target/ 目录"

# 显示输出文件信息
JAR_FILE=$(find target -name "*.jar" -not -name "*original*" | head -1)
if [ -f "$JAR_FILE" ]; then
    echo "输出文件: $JAR_FILE"
    echo "文件大小: $(du -h "$JAR_FILE" | cut -f1)"
fi
```

## 部署规范

### 插件安装测试
```java
public class DeploymentValidator {
    
    /**
     * 验证JAR文件的基本结构
     */
    public static boolean validateJarStructure(String jarPath) throws IOException {
        try (JarFile jarFile = new JarFile(jarPath)) {
            // 检查必需的文件
            boolean hasManifest = jarFile.getManifest() != null;
            boolean hasMainClass = jarFile.stream()
                .anyMatch(entry -> entry.getName().endsWith("BurpExtension.class"));
                
            return hasManifest && hasMainClass;
        }
    }
    
    /**
     * 检查依赖冲突
     */
    public static List<String> checkDependencyConflicts(String jarPath) throws IOException {
        List<String> conflicts = new ArrayList<>();
        
        try (JarFile jarFile = new JarFile(jarPath)) {
            // 检查是否包含Burp API类（不应该包含）
            boolean containsBurpApi = jarFile.stream()
                .anyMatch(entry -> entry.getName().startsWith("burp/api/"));
                
            if (containsBurpApi) {
                conflicts.add("JAR文件包含Burp API类，应该使用 provided scope");
            }
        }
        
        return conflicts;
    }
}
```

### 自动化部署脚本
```powershell
# deploy.ps1
param(
    [Parameter(Mandatory=$true)]
    [string]$JarPath,
    
    [string]$BurpPath = "C:\Program Files\BurpSuitePro\burpsuite_pro.jar"
)

Write-Host "部署 Burp Suite 插件..." -ForegroundColor Green

# 验证文件存在
if (-not (Test-Path $JarPath)) {
    Write-Host "错误: JAR 文件不存在: $JarPath" -ForegroundColor Red
    exit 1
}

if (-not (Test-Path $BurpPath)) {
    Write-Host "错误: Burp Suite 未找到: $BurpPath" -ForegroundColor Red
    exit 1
}

# 复制到 Burp 扩展目录
$ExtensionDir = "$env:USERPROFILE\.BurpSuite\extensions"
if (-not (Test-Path $ExtensionDir)) {
    New-Item -ItemType Directory -Path $ExtensionDir -Force
}

$DestPath = Join-Path $ExtensionDir (Split-Path $JarPath -Leaf)
Copy-Item $JarPath $DestPath -Force

Write-Host "插件已部署到: $DestPath" -ForegroundColor Green
Write-Host "请在 Burp Suite 的扩展选项卡中加载插件" -ForegroundColor Yellow
```

## 版本管理

### Git 提交规范
遵循 Conventional Commits 规范:

```
类型(范围): 描述

[可选的正文]

[可选的页脚]
```

常用类型:
- `feat`: 新功能
- `fix`: 错误修复  
- `docs`: 文档更新
- `style`: 代码格式化
- `refactor`: 重构
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动

### 发布流程
1. 更新版本号
2. 构建最终JAR包
3. 提交代码变更
4. 创建Git标签
5. 生成发布说明

```bash
# 发布脚本示例
./build.sh 1.0.0 false true
git add .
git commit -m "chore: release version 1.0.0"
git tag -a v1.0.0 -m "Release version 1.0.0"
git push origin main --tags
```

### Git提交规范 (每次生成代码后执行)
```bash
git add .
git commit -m "type: 描述"
```

提交类型说明：
- `feat`: 新功能开发
- `fix`: 错误修复
- `refactor`: 代码重构
- `style`: 代码格式调整
- `docs`: 文档更新
- `chore`: 构建配置等

