# Burp Suite 插件开发规范

## 技术栈要求
- **API**: 使用 Montoya API (参考文档: [apiDoc/montoya](mdc:apiDoc/montoya))
- **Java版本**: JDK 17
- **GUI框架**: Swing
- **架构模式**: MVC (Model-View-Controller)
- **构建工具**: Maven (参考: [pom.xml](mdc:pom.xml))

## 核心接口实现
1. 主插件类必须实现 `BurpExtension` 接口
2. 通过 `MontoyaApi` 获取 Burp Suite 功能访问权限
3. 使用 `Registration` 对象注册插件功能

## MVC架构规范
- **Model**: 数据层，处理业务逻辑和数据操作
- **View**: 视图层，使用Swing组件构建用户界面
- **Controller**: 控制层，协调Model和View之间的交互

## 标准项目结构
```
src/main/java/
├── com/yourcompany/burp/
│   ├── core/               # 核心接口和抽象类
│   │   ├── BurpExtension.java      # 主入口类
│   │   ├── ExtensionContext.java   # 扩展上下文
│   │   └── PluginManager.java      # 插件管理器
│   ├── model/              # 数据模型层
│   │   ├── entity/         # 实体类
│   │   ├── dto/           # 数据传输对象
│   │   └── repository/    # 数据访问层
│   ├── view/               # 视图层
│   │   ├── components/    # 自定义组件
│   │   ├── panels/        # 面板组件
│   │   ├── dialogs/       # 对话框
│   │   └── renderers/     # 渲染器
│   ├── controller/         # 控制器层
│   │   ├── handlers/      # 事件处理器
│   │   └── services/      # 业务服务
│   ├── config/             # 配置相关
│   │   ├── Settings.java  # 设置管理
│   │   └── Constants.java # 常量定义
│   ├── patterns/           # 设计模式实现
│   │   ├── factory/       # 工厂模式
│   │   ├── observer/      # 观察者模式
│   │   ├── strategy/      # 策略模式
│   │   ├── command/       # 命令模式
│   │   ├── proxy/         # 代理模式
│   │   └── singleton/     # 单例模式
│   ├── utils/              # 工具类
│   │   ├── HttpUtils.java
│   │   ├── UIUtils.java
│   │   └── LogUtils.java
│   └── exceptions/         # 自定义异常
└── resources/              # 资源文件
    ├── icons/             # 图标资源
    ├── config/            # 配置文件
    └── templates/         # 模板文件
```

## 编码规范
- 使用Java 17特性：records、switch expressions、text blocks等
- 遵循Google Java Style Guide
- 所有public方法必须有JavaDoc注释
- 异常处理必须记录到Burp的日志系统中

## Git提交规范
- 每次生成代码后必须执行：`git add . ; git commit -m "type: 描述"`
- 提交类型：feat(新功能)、fix(修复)、refactor(重构)、style(格式)、docs(文档)、chore(构建)

