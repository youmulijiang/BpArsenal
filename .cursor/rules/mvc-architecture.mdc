# MVC 架构设计规范

## 架构层次划分

### Model (模型层)
**职责**: 数据管理、业务逻辑、数据验证
**位置**: `src/main/java/com/yourcompany/burp/model/`

```java
// 示例: 数据模型类
public class ScanResult {
    private String url;
    private String vulnerability;
    private SeverityLevel severity;
    
    // 业务逻辑方法
    public boolean isHighRisk() {
        return severity == SeverityLevel.HIGH || severity == SeverityLevel.CRITICAL;
    }
}

// 示例: 数据访问对象
public class ScanResultRepository {
    private final List<ScanResult> results = new ArrayList<>();
    
    public void save(ScanResult result) { /* 保存逻辑 */ }
    public List<ScanResult> findByUrl(String url) { /* 查询逻辑 */ }
}
```

### View (视图层)
**职责**: 用户界面展示、用户交互处理
**位置**: `src/main/java/com/yourcompany/burp/view/`

```java
// 示例: Swing视图组件
public class ScanResultPanel extends JPanel {
    private JTable resultTable;
    private JButton exportButton;
    private ScanResultController controller;
    
    public ScanResultPanel(ScanResultController controller) {
        this.controller = controller;
        initializeComponents();
        setupEventListeners();
    }
    
    private void setupEventListeners() {
        exportButton.addActionListener(e -> controller.exportResults());
    }
    
    public void updateResults(List<ScanResult> results) {
        // 更新表格显示
    }
}
```

### Controller (控制器层)
**职责**: 协调Model和View、处理用户输入、业务流程控制
**位置**: `src/main/java/com/yourcompany/burp/controller/`

```java
// 示例: 控制器类
public class ScanResultController {
    private final ScanResultRepository repository;
    private final ScanResultPanel view;
    private final MontoyaApi api;
    
    public ScanResultController(ScanResultRepository repository, 
                               ScanResultPanel view, 
                               MontoyaApi api) {
        this.repository = repository;
        this.view = view;
        this.api = api;
    }
    
    public void startScan(String url) {
        // 业务流程控制
        try {
            ScanResult result = performScan(url);
            repository.save(result);
            view.updateResults(repository.findByUrl(url));
        } catch (Exception e) {
            api.logging().logToError("Scan failed: " + e.getMessage());
        }
    }
    
    public void exportResults() {
        // 导出逻辑
    }
}
```

## 设计原则

### 1. 单一职责原则
- 每个类只负责一个功能领域
- Model只处理数据和业务逻辑
- View只处理UI显示
- Controller只处理协调和流程控制

### 2. 依赖注入
- 通过构造函数注入依赖
- 避免在类内部直接创建依赖对象
- 便于单元测试和模块替换

### 3. 事件驱动
- View通过事件通知Controller
- Controller通过方法调用更新View
- 使用观察者模式处理复杂的状态变化

## 文件命名约定
- **Model层**:
  - 实体类: `XxxEntity.java` (如: `VulnerabilityEntity.java`)
  - DTO: `XxxDto.java` (如: `ScanRequestDto.java`)
  - Repository: `XxxRepository.java` (如: `ScanResultRepository.java`)
- **View层**:
  - 面板: `XxxPanel.java` (如: `ScanResultPanel.java`)
  - 对话框: `XxxDialog.java` (如: `SettingsDialog.java`)
  - 组件: `XxxComponent.java` (如: `ProgressComponent.java`)
- **Controller层**:
  - 控制器: `XxxController.java` (如: `ScanController.java`)
  - 处理器: `XxxHandler.java` (如: `HttpRequestHandler.java`)
  - 服务: `XxxService.java` (如: `ScanningService.java`)

## 层次职责划分

### Model层详细职责
- **实体类(entity)**: 核心业务对象，包含业务逻辑方法
- **DTO(dto)**: 数据传输对象，用于层间数据交换
- **Repository(repository)**: 数据访问层，处理数据的CRUD操作

### View层详细职责
- **组件(components)**: 可复用的UI组件
- **面板(panels)**: 完整的功能面板
- **对话框(dialogs)**: 模态和非模态对话框
- **渲染器(renderers)**: 自定义的表格、列表渲染器

### Controller层详细职责
- **处理器(handlers)**: 具体的事件处理逻辑
- **服务(services)**: 业务服务，协调多个组件

## Burp Suite 集成
- Controller负责与MontoyaApi交互
- Model处理Burp数据结构转换
- View使用Burp UI主题和样式

## Git提交规范
每次完成MVC层开发后：
```bash
git add .
git commit -m "feat: 实现[功能]的MVC架构"
```

